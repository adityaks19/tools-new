name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PM2_APP_NAME: 'file-drop-ai'

jobs:
  # Test and Build Job
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        
    - name: Run linting
      run: |
        npm run lint
        
    - name: Run tests
      run: |
        npm run test:coverage
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Build application
      run: |
        npm run build
        
    - name: Security audit
      run: |
        npm audit --audit-level moderate
        
  # Security Scanning
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --only=production
      
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT || 22 }}
        script: |
          cd /home/ubuntu/tools-new-staging
          git pull origin develop
          npm ci --only=production
          pm2 reload ecosystem.config.js --env staging
          
    - name: Health check staging
      run: |
        sleep 30
        curl -f ${{ secrets.STAGING_URL }}/health || exit 1

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --only=production
      
    - name: Create deployment artifact
      run: |
        tar -czf deployment.tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=coverage \
          --exclude=logs \
          .
          
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          # Create backup
          cd /home/ubuntu
          if [ -d "tools-new" ]; then
            cp -r tools-new tools-new-backup-$(date +%Y%m%d-%H%M%S)
          fi
          
          # Deploy new version
          cd /home/ubuntu/tools-new
          git pull origin main
          npm ci --only=production
          
          # Run database migrations if any
          # npm run migrate
          
          # Reload PM2 with zero downtime
          pm2 reload ecosystem.config.js --env production
          
          # Start health monitor if not running
          pm2 start health-monitor.js --name health-monitor || pm2 restart health-monitor
          
    - name: Health check production
      run: |
        sleep 30
        curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'üöÄ Production deployment successful!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: success()
      
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '‚ùå Production deployment failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run load tests
      run: |
        npx artillery quick --count 10 --num 100 ${{ secrets.PRODUCTION_URL }}/health
        
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ secrets.PRODUCTION_URL }}
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Cleanup old deployments
  cleanup:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Cleanup old backups
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          # Keep only last 5 backups
          cd /home/ubuntu
          ls -t tools-new-backup-* | tail -n +6 | xargs -r rm -rf
          
          # Clean up old logs
          find /home/ubuntu/tools-new/logs -name "*.log.*" -mtime +7 -delete
          
          # Clean up PM2 logs
          pm2 flush
