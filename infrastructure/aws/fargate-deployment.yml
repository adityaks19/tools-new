AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cost-optimized Fargate deployment with intelligent auto-scaling and tiered AI models'

Parameters:
  Environment:
    Type: String
    Default: 'production'
    AllowedValues: ['development', 'staging', 'production']
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for the deployment
  
  PrivateSubnetIds:
    Type: CommaDelimitedList
    Description: Private subnet IDs for Fargate tasks
  
  PublicSubnetIds:
    Type: CommaDelimitedList
    Description: Public subnet IDs for load balancer
  
  DomainName:
    Type: String
    Description: Domain name for the application
    Default: 'seo-nlp-app.com'

Resources:
  # ECS Cluster with Fargate Spot for cost optimization
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AWS::StackName}-cluster'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 70
          Base: 0
        - CapacityProvider: FARGATE
          Weight: 30
          Base: 1
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-alb'
      Scheme: internet-facing
      Type: application
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-alb'

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-alb-sg'

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-tg'
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AWS::StackName}-task'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'  # Start with minimal CPU
      Memory: '512'  # Start with minimal memory
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: seo-nlp-app
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/seo-nlp-app:latest'
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: !Ref Environment
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: BEDROCK_REGION
              Value: !Ref AWS::Region
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - 'curl -f http://localhost:3000/health || exit 1'
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # ECS Service with auto-scaling
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub '${AWS::StackName}-service'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 0  # Start with 0 tasks
      LaunchType: FARGATE
      PlatformVersion: LATEST
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets: !Ref PrivateSubnetIds
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: seo-nlp-app
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      EnableExecuteCommand: true

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ecs-sg'

  # Auto Scaling Target
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 0  # Allow scaling to zero
      ResourceId: !Sub 'service/${ECSCluster}/${ECSService.Name}'
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Scale Up Policy
  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-up'
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 300
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 50
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 50
            ScalingAdjustment: 2

  # Scale Down Policy
  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-scale-down'
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 600  # Longer cooldown for scale down
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  # CloudWatch Alarms for Auto Scaling
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-cpu-high'
      AlarmDescription: 'Scale up on high CPU'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ServiceName
          Value: !Sub '${AWS::StackName}-service'
        - Name: ClusterName
          Value: !Ref ECSCluster
      AlarmActions:
        - !Ref ScaleUpPolicy

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-cpu-low'
      AlarmDescription: 'Scale down on low CPU'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 600
      EvaluationPeriods: 3
      Threshold: 10
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: ServiceName
          Value: !Sub '${AWS::StackName}-service'
        - Name: ClusterName
          Value: !Ref ECSCluster
      AlarmActions:
        - !Ref ScaleDownPolicy

  # Request Count Alarm for scaling from zero
  RequestCountAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-requests-high'
      AlarmDescription: 'Scale up on incoming requests'
      MetricName: RequestCount
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
      AlarmActions:
        - !Ref ScaleUpPolicy
      TreatMissingData: notBreaching

  # Lambda function for intelligent scaling
  AutoScalerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-autoscaler'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt AutoScalerRole.Arn
      Timeout: 300
      Environment:
        Variables:
          CLUSTER_NAME: !Ref ECSCluster
          SERVICE_NAME: !Sub '${AWS::StackName}-service'
          TARGET_GROUP_ARN: !Ref TargetGroup
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ecs = new AWS.ECS();
          const cloudwatch = new AWS.CloudWatch();
          const elbv2 = new AWS.ELBv2();
          
          exports.handler = async (event) => {
              const clusterName = process.env.CLUSTER_NAME;
              const serviceName = process.env.SERVICE_NAME;
              const targetGroupArn = process.env.TARGET_GROUP_ARN;
              
              try {
                  // Get current service status
                  const service = await ecs.describeServices({
                      cluster: clusterName,
                      services: [serviceName]
                  }).promise();
                  
                  const currentDesiredCount = service.services[0].desiredCount;
                  const runningCount = service.services[0].runningCount;
                  
                  // Get target group health
                  const targets = await elbv2.describeTargetHealth({
                      TargetGroupArn: targetGroupArn
                  }).promise();
                  
                  const healthyTargets = targets.TargetHealthDescriptions.filter(
                      target => target.TargetHealth.State === 'healthy'
                  ).length;
                  
                  // Get recent request metrics
                  const endTime = new Date();
                  const startTime = new Date(endTime.getTime() - 10 * 60 * 1000); // 10 minutes ago
                  
                  const metrics = await cloudwatch.getMetricStatistics({
                      Namespace: 'AWS/ApplicationELB',
                      MetricName: 'RequestCount',
                      Dimensions: [
                          {
                              Name: 'LoadBalancer',
                              Value: targetGroupArn.split('/')[1] + '/' + targetGroupArn.split('/')[2] + '/' + targetGroupArn.split('/')[3]
                          }
                      ],
                      StartTime: startTime,
                      EndTime: endTime,
                      Period: 300,
                      Statistics: ['Sum']
                  }).promise();
                  
                  const totalRequests = metrics.Datapoints.reduce((sum, point) => sum + point.Sum, 0);
                  
                  console.log(`Current state: desired=${currentDesiredCount}, running=${runningCount}, healthy=${healthyTargets}, requests=${totalRequests}`);
                  
                  // Intelligent scaling logic
                  let newDesiredCount = currentDesiredCount;
                  
                  if (totalRequests === 0 && currentDesiredCount > 0) {
                      // No requests in last 10 minutes, scale to zero
                      newDesiredCount = 0;
                      console.log('Scaling to zero due to no requests');
                  } else if (totalRequests > 0 && currentDesiredCount === 0) {
                      // Incoming requests, scale up from zero
                      newDesiredCount = 1;
                      console.log('Scaling up from zero due to incoming requests');
                  } else if (totalRequests > 100 && healthyTargets < 2) {
                      // High load, scale up
                      newDesiredCount = Math.min(currentDesiredCount + 1, 10);
                      console.log('Scaling up due to high load');
                  } else if (totalRequests < 10 && healthyTargets > 1) {
                      // Low load, scale down
                      newDesiredCount = Math.max(currentDesiredCount - 1, 1);
                      console.log('Scaling down due to low load');
                  }
                  
                  // Update service if needed
                  if (newDesiredCount !== currentDesiredCount) {
                      await ecs.updateService({
                          cluster: clusterName,
                          service: serviceName,
                          desiredCount: newDesiredCount
                      }).promise();
                      
                      console.log(`Updated service desired count from ${currentDesiredCount} to ${newDesiredCount}`);
                  }
                  
                  return {
                      statusCode: 200,
                      body: JSON.stringify({
                          message: 'Auto-scaling completed',
                          previousCount: currentDesiredCount,
                          newCount: newDesiredCount,
                          requests: totalRequests
                      })
                  };
                  
              } catch (error) {
                  console.error('Error in auto-scaler:', error);
                  throw error;
              }
          };

  # EventBridge rule to trigger auto-scaler
  AutoScalerSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${AWS::StackName}-autoscaler-schedule'
      Description: 'Trigger auto-scaler every 5 minutes'
      ScheduleExpression: 'rate(5 minutes)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt AutoScalerFunction.Arn
          Id: 'AutoScalerTarget'

  AutoScalerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AutoScalerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AutoScalerSchedule.Arn

  # IAM Roles
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: '*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: '*'

  AutoScalerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ECSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                Resource: '*'
        - PolicyName: CloudWatchAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:PutMetricData
                Resource: '*'
        - PolicyName: ELBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:DescribeTargetHealth
                  - elasticloadbalancing:DescribeLoadBalancers
                Resource: '*'

  # CloudWatch Log Group
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${AWS::StackName}'
      RetentionInDays: 7  # Short retention for cost optimization

  # ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: seo-nlp-app
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 5 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 5
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

Outputs:
  ClusterName:
    Description: 'ECS Cluster Name'
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-cluster-name'

  ServiceName:
    Description: 'ECS Service Name'
    Value: !Sub '${AWS::StackName}-service'
    Export:
      Name: !Sub '${AWS::StackName}-service-name'

  LoadBalancerDNS:
    Description: 'Load Balancer DNS Name'
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-alb-dns'

  ECRRepositoryURI:
    Description: 'ECR Repository URI'
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}'
    Export:
      Name: !Sub '${AWS::StackName}-ecr-uri'

  AutoScalerFunctionName:
    Description: 'Auto Scaler Lambda Function Name'
    Value: !Ref AutoScalerFunction
    Export:
      Name: !Sub '${AWS::StackName}-autoscaler-function'
